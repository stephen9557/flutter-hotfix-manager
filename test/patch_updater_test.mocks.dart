// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_hotfix_manager/test/patch_updater_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_hotfix_manager/src/manager/patch_cache_manager.dart'
    as _i5;
import 'package:flutter_hotfix_manager/src/network/patch_meta_fetcher.dart'
    as _i2;
import 'package:flutter_hotfix_manager/src/status/patch_status.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PatchNetworkClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockPatchNetworkClient extends _i1.Mock
    implements _i2.PatchNetworkClient {
  MockPatchNetworkClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> get(String? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> download(
    String? url,
    String? savePath, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#download, [url, savePath], {#headers: headers}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [PatchCacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPatchCacheManager extends _i1.Mock implements _i5.PatchCacheManager {
  MockPatchCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get cacheDir =>
      (super.noSuchMethod(
            Invocation.getter(#cacheDir),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#cacheDir),
            ),
          )
          as String);

  @override
  String getPatchFilePath(_i6.PatchModel? patch) =>
      (super.noSuchMethod(
            Invocation.method(#getPatchFilePath, [patch]),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#getPatchFilePath, [patch]),
            ),
          )
          as String);

  @override
  _i3.Future<void> clearPatch(String? patchId, _i6.PatchType? type) =>
      (super.noSuchMethod(
            Invocation.method(#clearPatch, [patchId, type]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
